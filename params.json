{"name":"Stripe-CLI","tagline":"The Command-Line Interface to Stripe","body":"<a href=\"http://badge.fury.io/rb/stripe-cli\"><img style=\"float:right;\" src=\"https://badge.fury.io/rb/stripe-cli.png\" alt=\"Gem Version\" height=\"18\"></a>\r\n<a href=\"https://codeclimate.com/repos/52773e8fc7f3a3121a004455/feed\"><img style=\"float:right;margin-right:10px;\" src=\"https://codeclimate.com/repos/52773e8fc7f3a3121a004455/badges/67e5d04281479d6f8cb3/gpa.png\"></a>\r\n# Stripe::CLI\r\nstripe-cli is the command line interface to [Stripe](https://stripe.com).\r\n\r\nOffering a friendly, intuitive interface to the entire API via a git-style command suite.\r\n\r\nWith an emphasis on convenience and productivity and a commitment to pretty, colorful, but most of all READABLE output.\r\n\r\n\r\nUses [AwesomePrint](https://github.com/michaeldv/awesome_print) to provide very readable output on your command line.\r\n\r\n![example output](https://github.com/OutlawAndy/stripe-cli/raw/master/output.png)\r\n\r\nNote that Date/Time stamps are converted automatically.  No more Epoch/Unix timestamp garbage!\r\n\r\n## Installation\r\n\r\n    $ gem install stripe-cli\r\n\r\n## Configuration\r\n\r\nFor authentication, pass your secret key using the `-k` or `--key` option\r\n\r\n    $ stripe events list -k sk_test_abcdef123456\r\n\r\nTo use a specific api version, pass in the `-v` or `--version` option\r\n\r\n    $ stripe balance_transactions list -v \"2014-06-17\"\r\n\r\nYou may also store default configurations in a `~/.stripecli` file that conforms to the following example\r\n\r\n![example config file](https://github.com/OutlawAndy/stripe-cli/raw/master/example.png)\r\n\r\nIf this file exists, the specified default key is picked up and used automatically.\r\n\r\nThe current directory is now also checked for the existance of a `.stripecli` file. In which case, that file is used instead.\r\n\r\nYou may also overide the default environment setting in your config file by passing in the `-e` or `--env` option\r\n\r\n    $ stripe customers find cust_123 --env=live\r\n\r\nIf you manage separate Stripe accounts for several projects, I suggest creating a simple `.stripecli` file\r\nat the root of each project declaring the test api key for the appropriate Stripe account.\r\n\r\nFor example `./.stripecli`:\r\n\r\n    key = sk_test_abcdef123456\r\n\r\nor, if you'd rather:\r\n\r\n    default = test\r\n    [test]\r\n      key = sk_test_abcdef123456\r\n    [live]\r\n      key = sk_live_ghijkl789101\r\n\r\nIf you choose to go this route, make sure to add `.stripecli` to your `.gitignore` files.\r\n\r\n## Usage\r\n\r\n    Commands:\r\n      stripe balance         # show currently available and pending balance amounts\r\n      stripe cards           # find, list, create, & delete cards for both customers & recipients\r\n      stripe charges         # find, list, create, capture, & refund charges\r\n      stripe coupons         # find, list, create, & delete coupons\r\n      stripe customers       # find, list, create, & delete customers\r\n      stripe events          # find & list events\r\n      stripe help [COMMAND]  # Describe available commands or one specific command\r\n      stripe invoices        # find, list, pay, and close invoices\r\n      stripe plans           # find, list, create, & delete plans\r\n      stripe recipients      # find, list, create & delete recipients\r\n      stripe subscriptions   # find, list, create & cancel multiple subscriptions per customer\r\n      stripe tokens          # find & create tokens for bank accounts & credit cards\r\n      stripe transactions    # find & list balance transactions\r\n      stripe transfers       # find, list, & create transfers\r\n\r\n\r\nAny parameters accepted by the [stripe api](https://stripe.com/docs/api) are acceptable options to pass into commands, including metadata.\r\n\r\n    $ stripe charges create [--amount=AMOUNT][--description=DESC][--card-number=NUM][--card-cvc=CVC][--card-exp-month=MM][--card-exp-year=YYYY]\r\n\r\nor\r\n\r\n    $ stripe charges create [--amount=AMOUNT][--card=TOKEN_ID][--metadata=foo:bar details:\"product# 4369\"]\r\n\r\nor\r\n\r\n    $ stripe charges create [--amount=AMOUNT][--customer=CUST_ID]\r\n\r\n## cursor-based pagination\r\n\r\nfor all ```list``` operations\r\n\r\n    Options:\r\n      [--starting-after=OBJECT_ID]  # The ID of the last object in the previous paged result set.\r\n      [--ending-before=OBJECT_ID]   # The ID of the first object in the previous paged result set, when paging backwards through the list.\r\n      [--limit=LIMIT]               # a limit on the number of resources returned, between 1 and 100\r\n\r\n\r\nThough Stripe advocates using cursor-based pagination, offset-based pagination is still supported.\r\n\r\ne.g. fetching a second page\r\n\r\n    stripe events list --count=10 --offset=10\r\n\r\n\r\n## Interactive Menus\r\n\r\nPassing NO (or partial) arguments to any operation, will trigger an interactive menu\r\n\r\n    $ stripe charges create\r\n    Amount in dollars: __\r\n\r\nor\r\n\r\n    $ stripe charges create [--amount=AMOUNT]\r\n    Name on Card: __\r\n\r\n## Exception Recovery\r\n\r\nApi errors are rescued and their messages displayed for you to read.  No more ```barfing``` to ```stdout```\r\n\r\n![error rescue example](https://github.com/OutlawAndy/stripe-cli/raw/master/error_message_display.png)\r\n\r\n\r\n## Sub Commands Usage\r\n\r\n### Charges\r\n\r\n    Commands:\r\n      stripe charges capture ID      # Capture a charge\r\n      stripe charges create          # Create a charge\r\n      stripe charges find ID         # Find a charge\r\n      stripe charges help [COMMAND]  # Describe subcommands or one specific subcommand\r\n      stripe charges list            # List charges\r\n      stripe charges refund ID       # Refund a charge\r\n\r\n### Tokens\r\n\r\n    Commands:\r\n      stripe tokens create TYPE     # Create a new token of type TYPE(card or account)\r\n      stripe tokens find ID         # Find a Token\r\n      stripe tokens help [COMMAND]  # Describe subcommands or one specific subcommand\r\n\r\n### Cards\r\n\r\n    Commands:\r\n      stripe cards create --owner=OWNER     # Create a new card for OWNER (customer or recipient)\r\n      stripe cards delete ID --owner=OWNER  # Delete ID card for OWNER (customer or recipient)\r\n      stripe cards find ID --owner=OWNER    # Find ID card for OWNER (customer or recipient)\r\n      stripe cards help [COMMAND]           # Describe subcommands or one specific subcommand\r\n      stripe cards list --owner=OWNER       # List cards for OWNER (customer or recipient)\r\n\r\n### Customers\r\n\r\n    Commands:\r\n      stripe customers create          # Create a new customer\r\n      stripe customers delete ID       # Delete a customer\r\n      stripe customers find ID         # Find a customer\r\n      stripe customers help [COMMAND]  # Describe subcommands or one specific subcommand\r\n      stripe customers list            # List customers\r\n\r\n### Subscriptions\r\n\r\n    Commands:\r\n      stripe subscriptions cancel ID --customer=CUSTOMER  # Cancel ID subscription for CUSTOMER customer\r\n      stripe subscriptions create --customer=CUSTOMER     # Create a subscription for CUSTOMER customer\r\n      stripe subscriptions find ID --customer=CUSTOMER    # Find ID subscription for CUSTOMER customer\r\n      stripe subscriptions help [COMMAND]                 # Describe subcommands or one specific subcommand\r\n      stripe subscriptions list --customer=CUSTOMER       # List subscriptions for CUSTOMER customer\r\n\r\n### Invoices\r\n\r\n    Commands:\r\n      stripe invoices close ID           # Close an unpaid invoice\r\n      stripe invoices find ID            # Find an invoice\r\n      stripe invoices help [COMMAND]     # Describe subcommands or one specific subcommand\r\n      stripe invoices list               # List invoices (optionally by customer_id)\r\n      stripe invoices pay ID             # trigger an open invoice to be paid immediately\r\n      stripe invoices upcoming CUSTOMER  # find the upcoming invoice for CUSTOMER\r\n\r\n### Plans\r\n\r\n    Commands:\r\n      stripe plans create          # Create a new plan\r\n      stripe plans delete ID       # Delete a plan\r\n      stripe plans find ID         # Find a plan\r\n      stripe plans help [COMMAND]  # Describe subcommands or one specific subcommand\r\n      stripe plans list            # List plans\r\n\r\n### Coupons\r\n\r\n    Commands:\r\n      stripe coupons create          # Create a new Coupon\r\n      stripe coupons delete ID       # Delete a coupon\r\n      stripe coupons find ID         # Find a coupon\r\n      stripe coupons help [COMMAND]  # Describe subcommands or one specific subcommand\r\n      stripe coupons list            # List coupons\r\n\r\n### Events\r\n\r\n    Commands:\r\n      stripe events find ID         # Find a event\r\n      stripe events help [COMMAND]  # Describe subcommands or one specific subcommand\r\n      stripe events list            # List events\r\n\r\n### BalanceTransactions\r\n\r\n    Commands:\r\n      stripe transactions find ID         # Find a transaction\r\n      stripe transactions help [COMMAND]  # Describe subcommands or one specific subcommand\r\n      stripe transactions list [TYPE]     # List transactions, optionaly filter by type: ( charge refund adjustment application_fee application_fee_refund transfer transfer_failure )\r\n\r\n### Recipients\r\n\r\n    Commands:\r\n      stripe recipients create          # Create a new recipient\r\n      stripe recipients delete ID       # Delete a recipient\r\n      stripe recipients find ID         # Find a recipient\r\n      stripe recipients help [COMMAND]  # Describe subcommands or one specific subcommand\r\n      stripe recipients list            # List recipients\r\n\r\n### Transfers\r\n\r\n    Commands:\r\n      stripe transfers create          # Create a new outgoing money transfer\r\n      stripe transfers find ID         # Find a transfer\r\n      stripe transfers help [COMMAND]  # Describe subcommands or one specific subcommand\r\n      stripe transfers list            # List transfers, optionaly filter by recipient or transfer status: ( pending paid failed )\r\n\r\n#### Easter Egg Alert!\r\n\r\nYou can pass the `--balance` flag into `transfer create` to automatically set transfer `amount` equal to your currently available balance.\r\n\r\nexample:\r\n\r\n    $ stripe transfer create --balance --recipient=self\r\n\r\n> No, its not magic.  The `--balance` flag just triggers a 'preflight' api call to retrieve your current balance and assigns that to the `--amount` option\r\n\r\n## Road Map\r\n\r\n1. `update` command operations\r\n1. support for `disputes` & dispute handling\r\n1. support creating/updating config file through cli\r\n1. plug-able output formating for use in scripts and such\r\n1. request a feature you would like via the issue tracker\r\n\r\n\r\nPull requests are always welcome and appriciated.\r\n\r\nPlease report issues, offer suggestions, and voice concerns in the issues tracker.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}